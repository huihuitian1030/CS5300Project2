package p2;

import java.io.*;
import java.util.*;

public class EdgesFilter {
	protected static final String inputFile = "edges.txt";
	protected static final String outputFile = "selectedEdges.txt";
	protected static final String space = " ";
	protected static final String parser= "\\s+";
	protected static final double netId = 0.546;
	protected static double rejectMin;
	protected static double rejectLimit;
	protected static int numberNodes = 685230;
	private static Map<Integer, Node> nodeMap;
	
	public EdgesFilter() {
		rejectMin = 0.9 * netId;
		rejectLimit = rejectMin+ 0.01;
		nodeMap = new HashMap<Integer, Node>();
		createMap();
		selectEdges();
	}
	
	private void createMap() {
		for (int i = 0; i<numberNodes; i++){
			nodeMap.put(i, new Node(i));
		}
	}
	
	private void selectEdges() {
		try {
			BufferedReader buffer = new BufferedReader(new FileReader(inputFile));
			BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile, false));
			String line = "";
			while(true) {
				line = buffer.readLine();
				if (line == null || line.isEmpty()) {
					break;
				}
				line = line.trim();
				String[] info = line.split(parser);
				int src = Integer.parseInt(info[0]);
				int dest = Integer.parseInt(info[1]);
				double randomNum = Double.parseDouble(info[2]);
				if (randomNum>=rejectMin && randomNum <rejectLimit) {
					continue;
				}
				nodeMap.get(src).addEdge(dest);
				writer.newLine();
				writer.write(Integer.toString(src));
				writer.write(space);
				writer.write(Integer.toString(dest));
			}
			buffer.close();
			writer.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
