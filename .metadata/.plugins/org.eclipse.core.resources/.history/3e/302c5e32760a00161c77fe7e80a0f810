package p2;

import java.io.*;
import java.util.*;

public class EdgesFilter {
	protected static final String inputFile = "edges.txt";
	protected static final String outputFile = "selectedEdges.txt";
	protected static final String space = " ";
	protected static final String parser= "\\s+";
	protected static final double netId = 0.546;
	protected static double rejectMin;
	protected static double rejectLimit;
	protected static int numberNodes = 685230;
	protected static float defaultPageRank = 1.0f/numberNodes;
	protected static final String connection = ",";
	 
	public EdgesFilter() {
		rejectMin = 0.9 * netId;
		rejectLimit = rejectMin+ 0.01;
		selectEdges();
	}
	
	protected void selectEdges() {
		try {
			BufferedReader buffer = new BufferedReader(new FileReader(inputFile));
			BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile, false));
			String line = "";
			String prevId = "";
			int count = 0;
			while(true) {
				line = buffer.readLine();
				if (line == null || line.isEmpty()) {
					break;
				}
				line = line.trim();
				String[] info = line.split(parser);
				String src = info[0];
				String dest = info[1];
				double randomNum = Double.parseDouble(info[2]);
				if (randomNum>=rejectMin && randomNum <rejectLimit) {
					continue;
				}
				if (src.equals(prevId)){
					writer.write(connection);
					writer.write(dest);
					count++;
				}else {
					if (prevId!="" && Integer.parseInt(src)-Integer.parseInt(prevId) == 1){
						writer.write(space);
						writer.write(count);
						count = 0;
						prevId = src;
						writer.newLine();
						writer.write(src);
						writer.write(space);
						writer.write(String.valueOf(defaultPageRank));
						writer.write(space);
						writer.write(dest);
					}
						
			
					
				}
				writer.newLine();
				writer.write(Integer.toString(src));
				writer.write(space);
				writer.write(Integer.toString(dest));
			}
			buffer.close();
			writer.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return nodeMap;
	}
}
