package p2;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.RunningJob;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;

public class BlockPageRank {
	protected static enum Counter {
        residual, totalIteration;
	}
	
	public static void main (String [] args) throws IOException{
		if (args.length!= 2){
			System.out.println("invalid input");
			System.exit(1);
		}
		String inputPath = args[0];
		String outputPath =args[1];
		List<Float> residual = new ArrayList<Float>();
		List<Float> averageIteration = new ArrayList<Float>();
		float averageResidual = 1.0f;
		int iteration = 0;
		
		while(averageResidual > Constant.residualThreshold) {
			JobConf conf = new JobConf(SimplePageRank.class);
			conf.setOutputKeyClass(Text.class);
	        conf.setOutputValueClass(Text.class);
	        
	        conf.setMapperClass(BlockPageRankMapper.class);
	        conf.setReducerClass(BlockPageRankReducer.class);
	        
	        conf.setInputFormat(TextInputFormat.class);
	        conf.setOutputFormat(TextOutputFormat.class);
	        if (iteration>0) {
				inputPath = outputPath + "/output" + iteration;
			}
	        FileInputFormat.setInputPaths(conf, new Path(inputPath));
	        FileOutputFormat.setOutputPath(conf, new Path(outputPath + "/output" + (iteration + 1)));
	        RunningJob job = JobClient.runJob(conf);
	        long curr_residual = job.getCounters()
					.findCounter(Counter.residual).getValue();
	        averageResidual = (float)curr_residual/ Constant.precision/Constant.numberNodes;
	        residual.add(averageResidual);
		}
		for (int i = 0; i<Constant.iteration; i++){
			System.out.println("Iteration " + i + "avg error "
					+ residual[i]);
		}
	}

}
